# 1. ENHANCED VARIABLES GENERATION (Generate Docker tag and variables step)
- name: Generate Docker tag and variables
  id: vars
  run: |
    COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-8)
    BRANCH_NAME="${{ github.ref_name }}"
    
    # Handle commit message safely (escape quotes and newlines)
    COMMIT_MESSAGE=$(echo '${{ github.event.head_commit.message }}' | tr -d '\n' | sed 's/"/\\"/g')
    COMMIT_AUTHOR='${{ github.event.head_commit.author.name }}'
    
    # Check if current commit is a merge commit
    PARENT_COUNT=$(git rev-list --parents -n 1 HEAD | wc -w)
    IS_MERGE_COMMIT=$((PARENT_COUNT > 2))
    
    # Get the previous commit for potential reset
    PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
    
    # Determine if this is a staging branch push
    IS_STAGING_BRANCH=false
    SOURCE_COMMIT=""
    
    if [ "$BRANCH_NAME" = "staging-kubernetes" ]; then
      IS_STAGING_BRANCH=true
      # For staging, try to find the source commit from dev-kubernetes
      # This could be from a merge commit or direct push
      if [ "$IS_MERGE_COMMIT" = "1" ]; then
        # Try to find the source commit from the merge
        SOURCE_COMMIT=$(git log --pretty=format:"%H" -n 1 --grep="dev-kubernetes" HEAD~1 2>/dev/null || echo "")
        if [ -z "$SOURCE_COMMIT" ]; then
          # Fallback: get the first parent (usually the target branch)
          SOURCE_COMMIT=$(git log --pretty=format:"%H" -n 1 HEAD~1)
        fi
      else
        # For direct commits to staging, use the previous commit
        SOURCE_COMMIT=$PREVIOUS_COMMIT
      fi
    fi
    
    # Set Docker tags based on branch
    if [ "$IS_STAGING_BRANCH" = "true" ]; then
      DOCKER_TAG="jazibumer/formedia:frontend-user-staging-${COMMIT_HASH}"
      SOURCE_TAG=""
      if [ -n "$SOURCE_COMMIT" ]; then
        SOURCE_HASH=$(echo $SOURCE_COMMIT | cut -c1-8)
        SOURCE_TAG="jazibumer/formedia:frontend-user-${SOURCE_HASH}"
      fi
      echo "source_tag=${SOURCE_TAG}" >> $GITHUB_OUTPUT
    else
      DOCKER_TAG="jazibumer/formedia:frontend-user-${COMMIT_HASH}"
    fi
    
    # Set all outputs
    echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT
    echo "docker_tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT
    echo "commit_message=${COMMIT_MESSAGE}" >> $GITHUB_OUTPUT
    echo "commit_author=${COMMIT_AUTHOR}" >> $GITHUB_OUTPUT
    echo "cache_key=frontend-user-cache" >> $GITHUB_OUTPUT
    echo "is_merge_commit=${IS_MERGE_COMMIT}" >> $GITHUB_OUTPUT
    echo "previous_commit=${PREVIOUS_COMMIT}" >> $GITHUB_OUTPUT
    echo "is_staging_branch=${IS_STAGING_BRANCH}" >> $GITHUB_OUTPUT
    echo "source_commit=${SOURCE_COMMIT}" >> $GITHUB_OUTPUT
    echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

---

# 2. CHECK SOURCE IMAGE EXISTS (New step)
- name: Check if source image exists (for staging)
  id: check_source
  if: steps.vars.outputs.is_staging_branch == 'true' && steps.vars.outputs.source_tag != ''
  run: |
    SOURCE_TAG="${{ steps.vars.outputs.source_tag }}"
    
    echo "🔍 Checking if source image exists: ${SOURCE_TAG}"
    
    # Check if the source image exists
    if docker manifest inspect "${SOURCE_TAG}" >/dev/null 2>&1; then
      echo "✅ Source image found: ${SOURCE_TAG}"
      echo "source_exists=true" >> $GITHUB_OUTPUT
    else
      echo "❌ Source image not found: ${SOURCE_TAG}"
      echo "source_exists=false" >> $GITHUB_OUTPUT
    fi

---

# 3. RETAG EXISTING IMAGE (New step)
- name: Retag existing image (for staging)
  id: retag_image
  if: steps.vars.outputs.is_staging_branch == 'true' && steps.check_source.outputs.source_exists == 'true'
  run: |
    SOURCE_TAG="${{ steps.vars.outputs.source_tag }}"
    TARGET_TAG="${{ steps.vars.outputs.docker_tag }}"
    
    echo "🏷️ Retagging image from ${SOURCE_TAG} to ${TARGET_TAG}"
    
    # Pull the source image
    echo "📥 Pulling source image..."
    docker pull "${SOURCE_TAG}"
    
    # Tag it with the new staging tag
    echo "🏷️ Creating new tag..."
    docker tag "${SOURCE_TAG}" "${TARGET_TAG}"
    
    # Push the new tag
    echo "📤 Pushing retagged image..."
    docker push "${TARGET_TAG}"
    
    echo "✅ Successfully retagged image!"
    echo "retagged=true" >> $GITHUB_OUTPUT

---

# 4. CONDITIONAL BUILD STEP (Modified existing step)
- name: Build and push Docker image
  id: docker_build
  # Only build if NOT staging branch OR source doesn't exist OR retag failed
  if: steps.vars.outputs.is_staging_branch == 'false' || steps.check_source.outputs.source_exists == 'false' || steps.retag_image.outputs.retagged != 'true'
  uses: docker/build-push-action@v5
  with:
    context: .
    push: true
    tags: ${{ steps.vars.outputs.docker_tag }}
    cache-from: |
      type=gha,scope=${{ steps.vars.outputs.cache_key }}
      type=registry,ref=jazibumer/formedia:frontend-user-cache
    cache-to: |
      type=gha,mode=max,scope=${{ steps.vars.outputs.cache_key }}
      type=registry,ref=jazibumer/formedia:frontend-user-cache,mode=max
    build-args: |
      BUILDKIT_INLINE_CACHE=1

---

# 5. WORKFLOW TRIGGER (Modified)
on:
  push:
    branches:
      - dev-kubernetes
      - staging-kubernetes  # Added staging branch trigger

---

# 6. ENHANCED SUMMARY (Modified final step)
- name: Summary
  if: success()
  run: |
    echo "🎉 Deployment completed successfully!"
    
    BRANCH_NAME="${{ steps.vars.outputs.branch_name }}"
    IS_STAGING="${{ steps.vars.outputs.is_staging_branch }}"
    RETAGGED="${{ steps.retag_image.outputs.retagged }}"
    
    if [ "$IS_STAGING" = "true" ] && [ "$RETAGGED" = "true" ]; then
      echo "⚡ Image retagged successfully (no rebuild needed)!"
      echo "📦 Source image: ${{ steps.vars.outputs.source_tag }}"
      echo "🏷️ New tag: ${{ steps.vars.outputs.docker_tag }}"
      echo "💰 Resources saved by retagging existing image!"
    else
      echo "🔨 Docker image built and pushed: ${{ steps.vars.outputs.docker_tag }}"
    fi
    
    echo "🔖 Commit hash: ${{ steps.vars.outputs.commit_hash }}"
    echo "🌿 Branch: ${BRANCH_NAME}"
    
    if [ "$BRANCH_NAME" = "dev-kubernetes" ]; then
      echo "📝 Pull request created/updated for promotion to staging-kubernetes branch"
      echo "🤖 Ready for staging deployment approval!"
    else
      echo "🚀 Ready for deployment!"
    fi
